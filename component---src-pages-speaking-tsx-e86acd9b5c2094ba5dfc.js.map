{"version":3,"sources":["webpack:///./src/components/speaker-bio.tsx","webpack:///./src/pages/speaking.tsx"],"names":["MainBio","query","render","data","author","site","siteMetadata","className","style","marginBottom","rhythm","role","aria-label","href","icon","faYoutube","color","title","faSpeakerDeck","fixed","avatar","childImageSharp","alt","minWidth","borderRadius","border","imgStyle","SpeakingIndex","location","siteTitle","talks","allMarkdownRemark","edges","keywords","KEYWORDS","map","node","frontmatter","fields","slug","relativeSlug","key","boxShadow","to","conference","shortDate","marginTop","width","height","src","recording","frameBorder","allow","allowFullScreen","slides","dangerouslySetInnerHTML","__html","abstract","excerpt"],"mappings":"yNAyGeA,EAjFmC,WAChD,OACE,kBAAC,cAAD,CACEC,MApBe,YAqBfC,OAAQ,SAACC,GAAS,IACRC,EAAWD,EAAKE,KAAKC,aAArBF,OACR,OACE,yBACEG,UAAU,qBACVC,MAAO,CACLC,aAAcC,YAAO,OAGvB,yBAAKH,UAAU,YACb,wBAAIA,UAAU,UAAUC,MAAO,CAAEC,aAAcC,YAAO,MACpD,0BAAMC,KAAK,MAAMC,aAAW,iBAA5B,WAEQ,IAHV,4DAMA,wBACEL,UAAU,mBACVC,MAAO,CAAEC,aAAcC,YAAO,KAE9B,4BACE,uBACEH,UAAU,kBACVM,KAAK,qCAEL,kBAAC,IAAD,CACEC,KAAMC,IACNC,MAAM,cACNC,MAAK,yCAIX,4BACE,uBACEV,UAAU,kBACVM,KAAK,kCAEL,kBAAC,IAAD,CACEC,KAAMI,IACNF,MAAM,cACNC,MAAK,kCAKb,wUAOA,uBAAGV,UAAU,WAAWM,KAAK,8BAA7B,kBAIF,kBAAC,IAAD,CACEN,UAAU,SACVY,MAAOhB,EAAKiB,OAAOC,gBAAgBF,MACnCG,IAAKlB,EACLI,MAAO,CACLC,aAAc,EACdc,SAAU,IACVC,aAAc,OACdC,OAAQ,yBAEVC,SAAU,CACRF,aAAc,c,YCffG,UAlEoD,SAAC,GAG9D,IAFJxB,EAEI,EAFJA,KACAyB,EACI,EADJA,SAEMC,EAAY1B,EAAKE,KAAKC,aAAaW,MACnCa,EAAQ3B,EAAK4B,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQJ,SAAUA,EAAUX,MAAOY,GACjC,kBAAC,IAAD,CAAKZ,MAAM,WAAWgB,SAAUC,MAChC,kBAAC,EAAD,MACCJ,EAAMK,KAAI,YAA6B,IAA1BC,EAA0B,EAA1BA,KACNnB,EAAQmB,EAAKC,YAAYpB,OAASmB,EAAKE,OAAOC,KAC9CC,EAAe,YAAYJ,EAAKE,OAAOC,KAC7C,OACE,yBACEhC,UAAU,eACVC,MAAO,CAAEC,aAAcC,YAAO,IAC9B+B,IAAKL,EAAKE,OAAOC,MAEjB,wBACE/B,MAAO,CACLC,aAAc,IAGhB,kBAAC,OAAD,CAAMD,MAAO,CAAEkC,UAAW,QAAUC,GAAIH,GACrCJ,EAAKC,YAAYO,WADpB,IACuC3B,IAGzC,2BAAOA,MAAOmB,EAAKC,YAAYQ,WAC5BT,EAAKC,YAAYQ,UADpB,MACyCT,EAAKC,YAAYT,UAE1D,yBACEpB,MAAO,CAAEsC,UAAWpC,YAAO,IAAMD,aAAcC,YAAO,KACtDH,UAAU,mBAEV,4BACEwC,MAAM,OACNC,OAAO,OACPC,IAAKb,EAAKC,YAAYa,UACtBC,YAAY,IACZC,MAAM,0EACNC,iBAAe,KAGlBjB,EAAKC,YAAYiB,OAChB,2BACE,uBAAG/C,UAAU,WAAWM,KAAMuB,EAAKC,YAAYiB,QAA/C,gBAKF,GAEF,uBACEC,wBAAyB,CACvBC,OAAQpB,EAAKC,YAAYoB,UAAYrB,EAAKsB","file":"component---src-pages-speaking-tsx-e86acd9b5c2094ba5dfc.js","sourcesContent":["import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\nimport Image from 'gatsby-image';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faYoutube, faSpeakerDeck } from '@fortawesome/free-brands-svg-icons';\nimport { rhythm } from '../utils/typography';\n\nconst mainBioQuery = graphql`\n  query SpeakerBioQuery {\n    avatar: file(absolutePath: { regex: \"/profile-pic-optimized.jpg/\" }) {\n      childImageSharp {\n        fixed(width: 250, height: 250, quality: 95) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        author\n      }\n    }\n  }\n`;\n\nconst MainBio: React.FunctionComponent<unknown> = () => {\n  return (\n    <StaticQuery\n      query={mainBioQuery}\n      render={(data) => {\n        const { author } = data.site.siteMetadata;\n        return (\n          <div\n            className=\"main-bio-container\"\n            style={{\n              marginBottom: rhythm(2.5),\n            }}\n          >\n            <div className=\"main-bio\">\n              <h1 className=\"heroine\" style={{ marginBottom: rhythm(1 / 5) }}>\n                <span role=\"img\" aria-label=\"woman teacher\">\n                  üë©üèª‚Äçüè´\n                </span>{' '}\n                Looking for a speaker for your upcoming tech conference?\n              </h1>\n              <ul\n                className=\"horizontal-links\"\n                style={{ marginBottom: rhythm(1) }}\n              >\n                <li>\n                  <a\n                    className=\"u-no-box-shadow\"\n                    href=\"http://bit.ly/talks-by-lauren-tan\"\n                  >\n                    <FontAwesomeIcon\n                      icon={faYoutube}\n                      color=\"var(--gray)\"\n                      title={`YouTube playlist with all my talks`}\n                    />\n                  </a>\n                </li>\n                <li>\n                  <a\n                    className=\"u-no-box-shadow\"\n                    href=\"https://speakerdeck.com/poteto\"\n                  >\n                    <FontAwesomeIcon\n                      icon={faSpeakerDeck}\n                      color=\"var(--gray)\"\n                      title={`Link to all my slide decks`}\n                    />\n                  </a>\n                </li>\n              </ul>\n              <p>\n                Lauren Tan is a Software Engineer at Facebook. Previously, she\n                was an Engineering Manager at Netflix. She&apos;s spoken at more\n                than 15 talks at small to large conferences. She speaks about\n                TypeScript, JavaScript, React, GraphQL, Elixir/Phoenix,\n                Microservices, engineering leadership and/or management.\n              </p>\n              <a className=\"squiggly\" href=\"mailto:arr@sugarpirate.com\">\n                Get in touch!\n              </a>\n            </div>\n            <Image\n              className=\"avatar\"\n              fixed={data.avatar.childImageSharp.fixed}\n              alt={author}\n              style={{\n                marginBottom: 0,\n                minWidth: 250,\n                borderRadius: `100%`,\n                border: `8px solid var(--blue)`,\n              }}\n              imgStyle={{\n                borderRadius: `50%`,\n              }}\n            />\n          </div>\n        );\n      }}\n    />\n  );\n};\n\nexport default MainBio;\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport SpeakerBio from '../components/speaker-bio';\nimport { rhythm } from '../utils/typography';\nimport KEYWORDS from '../constants/seo-keywords';\n\ninterface SpeakingIndexProps {\n  data: any;\n  location: Location;\n}\n\nconst SpeakingIndex: React.FunctionComponent<SpeakingIndexProps> = ({\n  data,\n  location,\n}) => {\n  const siteTitle = data.site.siteMetadata.title;\n  const talks = data.allMarkdownRemark.edges;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"Speaking\" keywords={KEYWORDS} />\n      <SpeakerBio />\n      {talks.map(({ node }: { node: any }) => {\n        const title = node.frontmatter.title || node.fields.slug;\n        const relativeSlug = `/speaking${node.fields.slug}`;\n        return (\n          <div\n            className=\"talk-preview\"\n            style={{ marginBottom: rhythm(1) }}\n            key={node.fields.slug}\n          >\n            <h2\n              style={{\n                marginBottom: 0,\n              }}\n            >\n              <Link style={{ boxShadow: `none` }} to={relativeSlug}>\n                {node.frontmatter.conference}&mdash;{title}\n              </Link>\n            </h2>\n            <small title={node.frontmatter.shortDate}>\n              {node.frontmatter.shortDate} &middot; {node.frontmatter.location}\n            </small>\n            <div\n              style={{ marginTop: rhythm(0.5), marginBottom: rhythm(0.5) }}\n              className=\"u-video-wrapper\"\n            >\n              <iframe\n                width=\"100%\"\n                height=\"auto\"\n                src={node.frontmatter.recording}\n                frameBorder=\"0\"\n                allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                allowFullScreen\n              ></iframe>\n            </div>\n            {node.frontmatter.slides ? (\n              <p>\n                <a className=\"squiggly\" href={node.frontmatter.slides}>\n                  View slides\n                </a>\n              </p>\n            ) : (\n              ''\n            )}\n            <p\n              dangerouslySetInnerHTML={{\n                __html: node.frontmatter.abstract || node.excerpt,\n              }}\n            />\n          </div>\n        );\n      })}\n    </Layout>\n  );\n};\n\nexport default SpeakingIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { published: { eq: true }, kind: { eq: \"talk\" } } }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            shortDate: date(formatString: \"MMMM DD, YYYY\")\n            title\n            conference\n            location\n            abstract\n            categories\n            slides\n            recording\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}